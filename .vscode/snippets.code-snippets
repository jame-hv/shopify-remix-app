{
  "@jame-vu/polaris/create-page": {
    "prefix": "createPage",
      "body": [
        "import type { ActionFunctionArgs, LoaderFunctionArgs } from \"@remix-run/node\";",
        "import { useFetcher, useLoaderData } from \"@remix-run/react\";",
        "import { TitleBar } from \"@shopify/app-bridge-react\";",
        "import {",
        "  BlockStack,",
        "  Button,",
        "  ButtonGroup,",
        "  Card,",
        "  Layout,",
        "  Page,",
        "  Text,",
        "  TextField",
        "} from \"@shopify/polaris\";",
        "import React, { useState } from \"react\";",
        "import { useToast } from \"~/hooks/useToast\";",
        "import { authenticate } from \"~/shopify.server\";",
        "",
        "export const loader = async ({ request }: LoaderFunctionArgs) => {",
        "  const { session } = await authenticate.admin(request);",
        "  return { shop: session.shop };",
        "};",
        "",
        "export const action = async ({ request }: ActionFunctionArgs) => {",
        "  const formData = await request.formData();",
        "  const data = Object.fromEntries(formData.entries());",
        "  console.log(\"Submitted form data ::\", data);",
        "  return { status: 200, success: true };",
        "};",
        "",
        "const ${1:Example} = () => {",
        "  const { shop } = useLoaderData<typeof loader>();",
        "  const fetcher = useFetcher<typeof action>();",
        "",
        "  const isLoading =",
        "    [\"loading\", \"submitting\"].includes(fetcher.state) &&",
        "    fetcher.formMethod === \"POST\";",
        "",
        "  const [formData, setFormData] = useState({",
        "    name: \"\",",
        "    email: \"\"",
        "  });",
        "",
        "  const [errors, setErrors] = useState({",
        "    name: \"\",",
        "    email: \"\"",
        "  });",
        "",
        "  const validateForm = () => {",
        "    const newErrors = { name: \"\", email: \"\" };",
        "",
        "    if (!formData.name.trim()) newErrors.name = \"Name is required.\";",
        "    if (!formData.email.trim()) {",
        "      newErrors.email = \"Email is required.\";",
        "    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {",
        "      newErrors.email = \"Enter a valid email address.\";",
        "    }",
        "",
        "    setErrors(newErrors);",
        "    return !Object.values(newErrors).some((error) => error !== \"\");",
        "  };",
        "",
        "  const handleChange = (key: keyof typeof formData, value: string) => {",
        "    setFormData((prev) => ({ ...prev, [key]: value }));",
        "    setErrors((prev) => ({ ...prev, [key]: \"\" }));",
        "  };",
        "",
        "  const handleSubmit = async () => {",
        "    if (!validateForm()) return;",
        "    fetcher.submit(formData, { method: \"POST\" });",
        "  };",
        "",
        "  useToast(fetcher, \"Saved!\");",
        "",
        "  return (",
        "    <Page>",
        "      <TitleBar title=\"Page Title\">",
        "        <button variant=\"primary\" onClick={() => console.log(\"clicked!\")}>",
        "          Action",
        "        </button>",
        "      </TitleBar>",
        "      <Layout>",
        "        <Layout.Section>",
        "          <Card>",
        "            <BlockStack gap=\"400\">",
        "              <Text as=\"h2\" variant=\"headingMd\">",
        "                Title",
        "              </Text>",
        "              <BlockStack gap=\"300\">",
        "                <Text as=\"p\" variant=\"bodyMd\">",
        "                  Hello {shop}, this is a sample page.",
        "                </Text>",
        "                <TextField",
        "                  type=\"text\"",
        "                  label=\"Name\"",
        "                  value={formData.name}",
        "                  onChange={(value) => handleChange(\"name\", value)}",
        "                  autoComplete=\"off\"",
        "                  error={errors.name}",
        "                />",
        "",
        "                <TextField",
        "                  type=\"email\"",
        "                  label=\"Email\"",
        "                  value={formData.email}",
        "                  onChange={(value) => handleChange(\"email\", value)}",
        "                  autoComplete=\"email\"",
        "                  error={errors.email}",
        "                />",
        "",
        "                <ButtonGroup>",
        "                  <Button",
        "                    loading={isLoading}",
        "                    variant=\"primary\"",
        "                    onClick={handleSubmit}",
        "                  >",
        "                    Submit",
        "                  </Button>",
        "                </ButtonGroup>",
        "              </BlockStack>",
        "            </BlockStack>",
        "          </Card>",
        "        </Layout.Section>",
        "      </Layout>",
        "    </Page>",
        "  );",
        "};",
        "",
        "export default ${1:Example};"
      ],
    "description": "Create a new page with simple form ",
  },

  "@jame-vu/polaris/create-component":{
    "prefix": "createComponent",
    "body": [
      "import { BlockStack, Card } from \"@shopify/polaris\";",
      "",
      "interface ${1:Component}Props {",
      "  data: any;",
      "}",
      "",
      "const ${1:Component} = (props: ${1:Component}Props) => {",
      "  const { data } = props;",
      "",
      "  return (",
      "    <>",
      "      <Card>",
      "        <BlockStack gap=\"200\">{JSON.stringify(data)}</BlockStack>",
      "      </Card>",
      "    </>",
      "  );",
      "};",
      "",
      "export default ${1:Component};"
    ],
    "description": "VS Code snippet for a Shopify Polaris playground component with customizable variable name"
  },

  "@jame-vu/polaris/create-table": {
    "prefix": "createSimpleTable",
    "body": [
      "import { useLoaderData, useFetcher } from \"@remix-run/react\";",
      "import {",
      "  Card,",
      "  DataTable,",
      "  Button,",
      "  Modal,",
      "  TextField,",
      "  BlockStack,",
      "  ButtonGroup,",
      "  Layout,",
      "  Page,",
      "  Text",
      "} from \"@shopify/polaris\";",
      "import { EditIcon, DeleteIcon } from \"@shopify/polaris-icons\";",
      "import { TitleBar } from \"@shopify/app-bridge-react\";",
      "import { useState } from \"react\";",
      "",
      "export const loader = async () => {",
      "  const products = [",
      "    { id: 1, title: 'Product A', price: '$10' },",
      "    { id: 2, title: 'Product B', price: '$20' }",
      "  ];",
      "  return { products };",
      "};",
      "",
      "const ${1:Example} = () => {",
      "  const { products } = useLoaderData<typeof loader>();",
      "  const fetcher = useFetcher();",
      "",
      "  const [active, setActive] = useState(false);",
      "  const [isEditing, setIsEditing] = useState(false);",
      "  const [form, setForm] = useState({ id: null, title: '', price: '' });",
      "",
      "  const openAddModal = () => {",
      "    setForm({ id: null, title: '', price: '' });",
      "    setIsEditing(false);",
      "    setActive(true);",
      "  };",
      "",
      "// TODO: Update types ",
      "  const openEditModal = (product: any) => {",
      "    setForm(product);",
      "    setIsEditing(true);",
      "    setActive(true);",
      "  };",
      "",
      "  const handleSubmit = () => {",
      "    const method = isEditing ? 'put' : 'post';",
      "    console.log(method, fetcher);",
      "    setActive(false);",
      "  };",
      "",
      "  const handleDelete = (id: number | string) => {",
      "    console.log('Delete record', id);",
      "  };",
      "",
      "// TODO: Update type ",
      "  const actionButtons = (item: any) => (",
      "    <ButtonGroup>",
      "      <Button icon={EditIcon} onClick={() => openEditModal(item)} />",
      "      <Button icon={DeleteIcon} variant=\"primary\" tone=\"critical\" onClick={() => handleDelete(item.id)} />",
      "    </ButtonGroup>",
      "  );",
      "",
      "  const rows = products.map((p) => [p.id, p.title, p.price, actionButtons(p)]);",
      "",
      "  return (",
      "    <Page>",
      "      <TitleBar title=\"Page title\" />",
      "      <Layout>",
      "        <Layout.Section>",
      "          <Card>",
      "            <Button onClick={openAddModal}>Add</Button>",
      "            <DataTable",
      "              columnContentTypes={[\"text\", \"text\", \"text\", \"text\"]}",
      "              headings={[\"ID\", \"Title\", \"Price\", \"Actions\"]}",
      "              rows={rows}",
      "              footerContent={`Showing ${rows.length} of ${rows.length} results`} ",
      "            />",
      "            <Modal",
      "              open={active}",
      "              onClose={() => setActive(false)}",
      "              title={isEditing ? 'Edit Product' : 'Add Product'}",
      "            >",
      "              <Modal.Section>",
      "                <BlockStack gap=\"400\">",
      "                  <TextField label=\"Title\" onChange={(v) => setForm({ ...form, title: v })} value={form.title} autoComplete=\"off\" />",
      "                  <TextField label=\"Price\" onChange={(v) => setForm({ ...form, price: v })} value={form.price} autoComplete=\"off\" />",
      "                  <ButtonGroup>",
      "                    <Button onClick={handleSubmit} variant=\"primary\">{isEditing ? 'Update' : 'Add'}</Button>",
      "                  </ButtonGroup>",
      "                </BlockStack>",
      "              </Modal.Section>",
      "            </Modal>",
      "          </Card>",
      "        </Layout.Section>",
      "        <Layout.Section variant=\"oneThird\">",
      "          <Card>",
      "            <BlockStack gap=\"400\">",
      "              <Text as=\"p\" variant=\"bodyMd\" fontWeight=\"bold\">Additional actions</Text>",
      "              <Button variant=\"primary\">Add action</Button>",
      "            </BlockStack>",
      "          </Card>",
      "        </Layout.Section>",
      "      </Layout>",
      "    </Page>",
      "  );",
      "};",
      "",
      "export default ${1:Example};"
    ],
    "description": "Create a simple polaris table with CRUD feature"
  },
  "@jame-vu/remix-loader": {
    "prefix": "loader",
      "body": [
      "import type { LoaderFunctionArgs } from \"@remix-run/node\";",
      "import { authenticate } from \"~/shopify.server\";",
      "",
      "export const loader = async ({ request }: LoaderFunctionArgs) => {",
      "  const { session, admin } = await authenticate.admin(request);",
      "  const { shop } = session;",
      "",
      "  // Implement logic",
      "",
      "  return {",
      "    admin,",
      "    shop,",
      "  };",
      "};"
    ],
    "description": "VS Code snippet for a basic Shopify Remix loader function"
  },
  "@jame-vu/remix-action": {
    "prefix": "action",
    "body": [
      "import type { ActionFunctionArgs } from \"@remix-run/node\";",
      "import { authenticate } from \"~/shopify.server\";",
      "",
      "export const action = async ({ request }: ActionFunctionArgs) => {",
      "  const { session, admin } = await authenticate.admin(request);",
      "  const { shop } = session;",
      "",
      "  // Implement logic",
      "",
      "  return {",
      "    admin,",
      "    shop,",
      "  };",
      "};"
    ],
    "description": "VS Code snippet for a basic Shopify Remix action function"
  }

}
